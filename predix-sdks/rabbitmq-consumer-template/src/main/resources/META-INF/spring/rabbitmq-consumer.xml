<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/rabbit
           http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd">

	<oxm:jaxb2-marshaller id="xmlmarshaller">
		<oxm:class-to-be-bound
			name="com.ge.predix.solsvc.consumersample.handler.SampleCustomObject" />
	</oxm:jaxb2-marshaller>

	<bean id="ctdMessageConverter"
		class="org.springframework.amqp.support.converter.ContentTypeDelegatingMessageConverter">
		<property name="delegates">
			<map>
				<entry key="application/json" value-ref="jacksonMessageConverter" />
				<entry key="application/xml" value-ref="xmlMessageConverter" />
				<entry key="text/plain" value-ref="simpleMessageConverter" />
			</map>
		</property>
	</bean>

	<bean id="simpleMessageConverter"
		class="org.springframework.amqp.support.converter.SimpleMessageConverter">
		<property name="createMessageIds" value="true" />
	</bean>

	<bean id="jacksonMessageConverter"
		class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter">
		<property name="classMapper">
			<bean class="org.springframework.amqp.support.converter.DefaultClassMapper">
				<property name="defaultType"
					value="com.ge.predix.solsvc.consumersample.handler.SampleCustomObject" />
			</bean>
		</property>
		<property name="createMessageIds" value="true" />
	</bean>

	<bean id="xmlMessageConverter"
		class="org.springframework.amqp.support.converter.MarshallingMessageConverter">
		<constructor-arg index="0" ref="xmlmarshaller" />
		<property name="createMessageIds" value="true" />
	</bean>

	<util:list id="retryChain">
		<bean class="org.springframework.amqp.rabbit.retry.MissingMessageIdAdvice">
			<constructor-arg>
				<bean class="org.springframework.retry.policy.MapRetryContextCache" />
			</constructor-arg>
		</bean>
		<ref bean="retryInterceptor" />
	</util:list>
	
	<bean id="retryInterceptor"
		class="org.springframework.amqp.rabbit.config.StatefulRetryOperationsInterceptorFactoryBean">
		<property name="messageRecoverer" ref="republishMessageRecoverer" />
		<property name="retryOperations" ref="retryTemplate" />
	</bean>

	<bean id="republishMessageRecoverer"
		class="org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer">
		<constructor-arg index="0" ref="fieldChangedEventTemplate" />
		<constructor-arg index="1" value="" />
		<constructor-arg index="2" value="${sampleErrorQueue}" />
	</bean>

	<bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
		<property name="backOffPolicy">
			<bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
				<property name="initialInterval" value="3000" />
				<property name="maxInterval" value="30000" />
			</bean>
		</property>
		<property name="retryPolicy">
			<bean class="org.springframework.retry.policy.SimpleRetryPolicy">
				<property name="maxAttempts" value="4" />
			</bean>
		</property>
	</bean>

	<rabbit:connection-factory id="fieldChangedEventConnectionFactory"
		addresses="${spring.rabbitmq.host}:${spring.rabbitmq.port}" username="${spring.rabbitmq.username}"
		password="${spring.rabbitmq.password}" />
	<rabbit:admin connection-factory="fieldChangedEventConnectionFactory" />

	<rabbit:template id="fieldChangedEventTemplate"
		connection-factory="fieldChangedEventConnectionFactory"
		message-converter="ctdMessageConverter" />

	<rabbit:queue name="${mainQueue}" />
	<rabbit:queue name="${sampleErrorQueue}" />

	<bean id="sampleMessageHandler"
		class="com.ge.predix.solsvc.consumersample.handler.SampleCustomMessageHandler" />
	<bean id="sampleSvc"
		class="com.ge.predix.solsvc.consumersample.service.SampleCustomService" />

	<rabbit:listener-container
		connection-factory="fieldChangedEventConnectionFactory" advice-chain="retryChain">
		<rabbit:listener queues="${mainQueue}"
			ref="sampleMessageHandler" />
	</rabbit:listener-container>

</beans>
